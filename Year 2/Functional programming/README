Stiuca Roxana-Elena, 325CB
--------------------------------------------------------------------------
		PP Coursework - Homework 1 - Building queries with Haskell
--------------------------------------------------------------------------
Task 1 - Read table - TODO 1
	-> implemented read_table through the use of map and split functions;
	-> read_tableschema extracts from the String the first line
	(oneSplitBy lnDel) and splits it into columns (splitBy colDel);
	-> read_entries splits the string into lines (splitBy lnDel) and then
	splits each line into its columns (map (splitBy colDel)).
--------------------------------------------------------------------------
Task 2 - Show table - TODO 2
	-> get_col_size is neccessary for adding right padding to each column;
	it computes the maximum sizes of elements in certain columns, by
	using a fold function applied on the entries, with:
		- accumulator = the list of sizes of the header's elements;
		- operation = a zipWith (to parse each column) that updates the
		maximum of each column.
	-> show_table simply constructs the string with the borders, header
	and each entry (goes through each entry by using fold and calling
	show_line).
	-> show_border constructs a string with only the '-' character that
	has the right length (length of all columns + number of columns + 1).
	-> show_line constructs the string by appending each field and
	the neccessary padding.
--------------------------------------------------------------------------
Task 3 - Define getFilter - TODO 3
	-> getFilter is a higher-order function which converts a filter
	condition and a table header into a function which, given a table
	entry, determines if it fits the condition or not.
	-> getFilter must be implemented for each constructor of
	FilterCondition; it uses basic list functions applied on header and
	entry.
	-> for (Not FilterCondition), it just negates the result.
--------------------------------------------------------------------------
Task 4 - Define eval - TODO 4
	-> eval is defined for each constructor of Query.
	-> Select:
		- Finds the indexes of fields in the header.
		- Then goes through each entry and extracts the columns with those
		indexes.
	-> SelectLimit:
		- First, it limits the table to its first 'limit' entries.
		- Then applies Select on the resulting table.
	-> Filter:
		- Applies filter on the entries where  the operation is
		getFilter cond header
	-> :||:
		- Creates a table with the header of any of the given tables and
		the entries of both concateneted.
	-> Cosine: explained at Task 6
--------------------------------------------------------------------------
Task 5 - TODO 5
	-> same_zone:
		- Filters entries by their "zone" field (only users with the same
		zone as the given user).
		- Selects only "user_id" and "occupation" fields.
		- Filters entries which don't have the "user_id" (eliminate the
		given user from the entries).
		-> get_user_zone extracts the "zone" field of an entry with a
		certain "user_id":
			- Filters user_info to find those entries with "user_id".
			- Select only the "zone" field.
			- Extracts the first entry and the first element in the list.
	-> male_within_age:
		- Filters entries by "sex" field.
		- Filters entries with "age" field < age_max.
		- Filters entries with "age" field >= age_min
		(not(field < age_min) && not(field == age_min))
	-> mixed:
		- Filters entries by "age" field.
		- Filters entries by "occupation" field.
		- Filters entries by "zone" field.
		- Selects only "user_id" column.
--------------------------------------------------------------------------
Task 6 - define eval Cosine - BONUS
	-> Steps:
		- Created the shell for the new entries so that they would look like
		[user_id1, user_id2, ""] by sorting the user_id field and removing
		the duplicates and then going through each and adding him and
		the next users's ids to the list. Left the third field uncompleted.
		- Computed a list of all movie_ids: extracted the "movie_id" field
		and removed the duplicates.
		- Created a list of pairs of form
			(user_id, list of ratings of all movies) by going through each
		movie in the list mentioned above and through each user and
		searching through the entries for those 2. Added 0 for a movie for
		which the user didn't give a rating.
		- Went through each entry in the shell and computes the cosine
		between those 2 users' ratings.
--------------------------------------------------------------------------
Obervations:
	- I used splitBy function from lecture/pdmatei github.
	- Sorted with the default sort function.